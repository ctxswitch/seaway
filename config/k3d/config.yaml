apiVersion: k3d.io/v1alpha4
kind: Simple 
metadata:
  name: seaway
servers: 1
agents: 2
# kubeAPI:
#   host: "myhost.my.domain"
#   hostIP: "127.0.0.1"
#   hostPort: "6445"
image: rancher/k3s:v1.28.12-k3s1
# network: my-custom-net # same as `--network my-custom-net`
# subnet: "172.28.0.0/16" # same as `--subnet 172.28.0.0/16`
# token: superSecretToken # same as `--token superSecretToken`
# volumes: # repeatable flags are represented as YAML lists
#   - volume: .:/app
#     nodeFilters:
#       - agent:*
ports:
  - port: 8080:80
    nodeFilters:
      - loadbalancer
# env:
#   - envVar: bar=baz
#     nodeFilters:
#       - server:0
# registries: # define how registries should be created or used
#   create: # creates a default registry to be used with the cluster; same as `--registry-create registry.localhost`
#     name: registry.localhost
#     host: "0.0.0.0"
#     hostPort: "5000"
#     proxy: # omit this to have a "normal" registry, set this to create a registry proxy (pull-through cache)
#       remoteURL: https://registry-1.docker.io # mirror the DockerHub registry
#       username: "" # unauthenticated
#       password: "" # unauthenticated
#     volumes:
#       - /some/path:/var/lib/registry # persist registry data locally
#   use:
#     - k3d-myotherregistry:5000 # some other k3d-managed registry; same as `--registry-use 'k3d-myotherregistry:5000'`
#   config: | # define contents of the `registries.yaml` file (or reference a file); same as `--registry-config /path/to/config.yaml`
#     mirrors:
#       "my.company.registry":
#         endpoint:
#           - http://my.company.registry:5000
# hostAliases: # /etc/hosts style entries to be injected into /etc/hosts in the node containers and in the NodeHosts section in CoreDNS
#   - ip: 1.2.3.4
#     hostnames: 
#       - my.host.local
#       - that.other.local
#   - ip: 1.1.1.1
#     hostnames:
#       - cloud.flare.dns
options:
  k3d:
    # wait: false
    # timeout: "300s"
    disableLoadbalancer: false
    disableImageVolume: false # same as `--no-image-volume`
    disableRollback: false # same as `--no-Rollback`
    # loadbalancer:
    #   configOverrides:
    #     - settings.workerConnections=2048
  # k3s:
  #   extraArgs: # additional arguments passed to the `k3s server|agent` command; same as `--k3s-arg`
  #     - arg: --tls-san=my.host.domain
  #       nodeFilters:
  #         - server:*
  #   nodeLabels:
  #     - label: foo=bar # same as `--k3s-node-label 'foo=bar@agent:1'` -> this results in a Kubernetes node label
  #       nodeFilters:
  #         - agent:1
  kubeconfig:
    updateDefaultKubeconfig: true
    switchCurrentContext: true
  # runtime:
  #   gpuRequest: all # same as `--gpus all`
  #   labels:
  #     - label: bar=baz # same as `--runtime-label 'bar=baz@agent:1'` -> this results in a runtime (docker) container label
  #       nodeFilters:
  #         - agent:1
