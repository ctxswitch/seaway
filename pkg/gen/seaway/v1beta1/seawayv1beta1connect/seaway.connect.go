// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: seaway/v1beta1/seaway.proto

package seawayv1beta1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1beta1 "ctx.sh/seaway/pkg/gen/seaway/v1beta1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SeawayServiceName is the fully-qualified name of the SeawayService service.
	SeawayServiceName = "seaway.v1beta1.SeawayService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SeawayServiceUploadProcedure is the fully-qualified name of the SeawayService's Upload RPC.
	SeawayServiceUploadProcedure = "/seaway.v1beta1.SeawayService/Upload"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	seawayServiceServiceDescriptor      = v1beta1.File_seaway_v1beta1_seaway_proto.Services().ByName("SeawayService")
	seawayServiceUploadMethodDescriptor = seawayServiceServiceDescriptor.Methods().ByName("Upload")
)

// SeawayServiceClient is a client for the seaway.v1beta1.SeawayService service.
type SeawayServiceClient interface {
	Upload(context.Context) *connect.ClientStreamForClient[v1beta1.UploadRequest, v1beta1.UploadResponse]
}

// NewSeawayServiceClient constructs a client for the seaway.v1beta1.SeawayService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSeawayServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SeawayServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &seawayServiceClient{
		upload: connect.NewClient[v1beta1.UploadRequest, v1beta1.UploadResponse](
			httpClient,
			baseURL+SeawayServiceUploadProcedure,
			connect.WithSchema(seawayServiceUploadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// seawayServiceClient implements SeawayServiceClient.
type seawayServiceClient struct {
	upload *connect.Client[v1beta1.UploadRequest, v1beta1.UploadResponse]
}

// Upload calls seaway.v1beta1.SeawayService.Upload.
func (c *seawayServiceClient) Upload(ctx context.Context) *connect.ClientStreamForClient[v1beta1.UploadRequest, v1beta1.UploadResponse] {
	return c.upload.CallClientStream(ctx)
}

// SeawayServiceHandler is an implementation of the seaway.v1beta1.SeawayService service.
type SeawayServiceHandler interface {
	Upload(context.Context, *connect.ClientStream[v1beta1.UploadRequest]) (*connect.Response[v1beta1.UploadResponse], error)
}

// NewSeawayServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSeawayServiceHandler(svc SeawayServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	seawayServiceUploadHandler := connect.NewClientStreamHandler(
		SeawayServiceUploadProcedure,
		svc.Upload,
		connect.WithSchema(seawayServiceUploadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/seaway.v1beta1.SeawayService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SeawayServiceUploadProcedure:
			seawayServiceUploadHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSeawayServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSeawayServiceHandler struct{}

func (UnimplementedSeawayServiceHandler) Upload(context.Context, *connect.ClientStream[v1beta1.UploadRequest]) (*connect.Response[v1beta1.UploadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("seaway.v1beta1.SeawayService.Upload is not implemented"))
}
